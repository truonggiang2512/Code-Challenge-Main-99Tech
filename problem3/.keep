import React, { useMemo } from "react";

// Import any necessary dependencies

// Define interfaces for wallet balance and formatted wallet balance
interface WalletBalance {
  currency: string;
  amount: number;
  blockchain: string; // Added missing property
}

interface FormattedWalletBalance extends WalletBalance {
  formatted: string;
}

// Define Props interface extending BoxProps
interface Props extends BoxProps {}

// Define WalletPage component
const WalletPage: React.FC<Props> = (props: Props) => {
  // Destructure props to extract children and rest props
  const { children, ...rest } = props;

  // Fetch wallet balances and prices using custom hooks
  const balances = useWalletBalances();
  const prices = usePrices();

  // Define function to get priority of a blockchain and update blockchain type
  const getPriority = (blockchain: string): number => {
    switch (blockchain) {
      case "Osmosis":
        return 100;
      case "Ethereum":
        return 50;
      case "Arbitrum":
        return 30;
      case "Zilliqa":
      case "Neo": // Combine cases with the same priority
        return 20;
      default:
        return -99;
    }
  };

  // Use useMemo to memoize sorted balances based on dependencies
  const sortedBalances = useMemo(() => {
    return (
      balances
        // Filter out balances with negative or zero amounts
        .filter((balance: WalletBalance) => balance.amount > 0)
        // Sort balances based on blockchain priority
        .sort((lhs: WalletBalance, rhs: WalletBalance) => {
          const leftPriority = getPriority(lhs.blockchain);
          const rightPriority = getPriority(rhs.blockchain);
          return rightPriority - leftPriority; // Sort in descending order
        })
    );
  }, [balances]); // Only recompute when balances change

  // Format balances
  const formattedBalances: FormattedWalletBalance[] = sortedBalances.map(
    (balance: WalletBalance) => ({
      ...balance,
      formatted: balance.amount.toFixed(),
    })
  );

  // Render rows using formatted balances
  const rows = formattedBalances.map(
    (balance: FormattedWalletBalance, index: number) => {
      const usdValue = prices[balance.currency] * balance.amount;
      return (
        <WalletRow
          className={classes.row}
          key={index}
          amount={balance.amount}
          usdValue={usdValue}
          formattedAmount={balance.formatted}
        />
      );
    }
  );

  // Render WalletPage component with children and rest props
  return <div {...rest}>{rows}</div>;
};
export default WalletPage;
